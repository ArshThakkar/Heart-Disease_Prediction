# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YZ6fY1ufG91h8Bm71hiK3femAvvfRGEv
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
from matplotlib.cm import rainbow
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

df = pd.read_csv('dataset.csv')

df.info()

df.describe()

"""# Feature Selection"""

import seaborn as sns
# Correlations-
corrmat = df.corr()
top_corr_features = corrmat.index
plt.figure(figsize = (20,10))
# Heatmap-
g = sns.heatmap(df[top_corr_features].corr(),annot=True,cmap="RdYlGn")

sns.set_style('whitegrid')
sns.countplot(x='target',data=df,palette='RdBu_r')

"""# Data Processing-"""

dataset = pd.get_dummies(df,columns = ['sex', 'cp', 'fbs','restecg','exang', 'slope', 'ca', 'thal'])

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
standardScaler = StandardScaler()
columns_to_scale = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']
dataset[columns_to_scale] = standardScaler.fit_transform(dataset[columns_to_scale])

dataset.head()

y = dataset['target']
X = dataset.drop(['target'], axis=1)

# Applying Cross Validation-
from sklearn.model_selection import cross_val_score
knn_scores = []
for k in range (1,21):
  knn_classifier = KNeighborsClassifier(n_neighbors = k)
  score= cross_val_score(knn_classifier,X,y,cv=10)
  knn_scores.append(score.mean())

# Plotting-
plt.figure(figsize=(25, 12))  # Increase the figure size
plt.plot([k for k in range(1,21)], knn_scores, color='red',)
for i in range(1,21):
  plt.text(i, knn_scores[i-1], (i, knn_scores[i-1]))
plt.xticks([i for i in range(1,21)])
plt.xlabel('Number of Neighbors (K)', fontsize=12)
plt.ylabel('Scores', fontsize=12)
plt.title('K Neighbors Classifier scores for different K values', fontsize=14)
plt.grid(True)  # Add grid lines
plt.tight_layout()  # Adjust spacing

# Using Random Forest-
from sklearn.ensemble import RandomForestClassifier

randomforest_classifier = RandomForestClassifier(n_estimators=10)
score = cross_val_score(randomforest_classifier,X,y,cv=10)

score.mean()

# Using KNN-
knn_classifier = KNeighborsClassifier(n_neighbors=12)
scoer=cross_val_score(knn_classifier,X,y,cv=10)

score.mean()

# Preprocess the dataset
dataset_processed = pd.get_dummies(df, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal'])
dataset_processed[columns_to_scale] = standardScaler.transform(dataset_processed[columns_to_scale])

# Split the dataset into features (X) and target variable (y)
y_new = dataset_processed['target']
X_new = dataset_processed.drop(['target'], axis=1)

# Make predictions using the trained KNN classifier
predictions = knn_classifier.predict(X_new)

# Display the predictions
print("Predictions:", predictions)

# Here's an explanation of the output predictions:
# 1: Indicates that the model predicts the patient to have heart disease.
# 0: Indicates that the model predicts the patient to not have heart disease.

